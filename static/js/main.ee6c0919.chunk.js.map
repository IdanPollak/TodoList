{"version":3,"sources":["components/Header.js","components/List.js","components/Input.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","Header","List","arr","crossLine","event","target","classList","toggle","className","map","i","onClick","key","Math","random","text","Input","AddToList","useState","setText","id","type","value","onChange","e","curr","console","log","App","TodoList","setTodoList","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wXAGA,IASMA,EAAYC,IAAOC,IAAV,KAUAC,EAnBA,WAEX,OACI,kBAACH,EAAD,KACI,2C,oSCHZ,IAyBMA,EAAYC,IAAOC,IAAV,KAeAE,EAxCF,SAAC,GAAW,IAAVC,EAAS,EAATA,IAELC,EAAY,SAAAC,GACEA,EAAMC,OACdC,UAAUC,OAAO,iBAG7B,OACI,kBAAC,EAAD,KACA,2BAAOC,UAAU,mBACf,+BACE,4BACE,wBAAIA,UAAU,UAAd,mBAGJ,+BACE,4BACE,4BAAKN,EAAIO,KAAI,SAAAC,GAAC,OAAE,yBAAKF,UAAU,UAAUG,QAASR,EAAWS,IAAKC,KAAKC,UAAWJ,EAAEK,e,2IClBlG,IA4BMlB,EAAYC,IAAOC,IAAV,KAMAiB,EAlCD,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAAe,EAEHC,mBAAU,IAFP,mBAEpBH,EAFoB,KAEdI,EAFc,KAc3B,OACI,kBAAC,EAAD,KACI,6BACA,2CACA,2BACAC,GAAG,SACFC,KAAK,OAAOC,MAAOP,EAAKO,MAAOC,SAhBlB,SAACC,GACvBL,EAAQ,CAACJ,KAAMS,EAAEnB,OAAOiB,WAkBhB,4BAAQX,QAfC,SAACa,GAChBP,GAAU,SAAAQ,GAAI,4BAAMA,GAAN,CAAWV,OAC1BI,EAAQ,CAACJ,KAAM,KACfW,QAAQC,IAAIZ,KAYL,SCNGa,EAfH,WAAO,IAAD,EAEgBV,mBAAS,IAFzB,mBAETW,EAFS,KAECC,EAFD,KAIhB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOb,UAAWa,IAClB,kBAAC,EAAD,CAAM5B,IAAK2B,MCDGE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.ee6c0919.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <Container>\r\n            <h1>Todo List</h1>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div\r\n`\r\ndisplay:flex;\r\njustify-content:center;\r\nbackground-color:bisque;\r\n`\r\n\r\n \r\n    \r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst List = ({arr}) => {\r\n\r\n    const crossLine = event => {\r\n        const element = event.target;\r\n        element.classList.toggle(\"crossed-line\");\r\n    };\r\n    \r\n    return (\r\n        <Container>\r\n        <table className=\"ui celled table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"center\">Missions Todo</th>\r\n           </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{arr.map(i=><div className=\"content\" onClick={crossLine} key={Math.random()}>{i.text}</div>)}</td>\r\n            </tr>\r\n          </tbody>  \r\n          </table>\r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div`\r\n.center {\r\n  display:flex;\r\n  justify-content:center;\r\n}\r\n.content {\r\n  text-align:center;\r\n  margin: auto;\r\n  width: 60%;\r\n  border: 3px solid;\r\n  padding: 10px;\r\n}\r\n.crossed-line {\r\n    text-decoration: line-through;\r\n}`\r\nexport default List\r\n\r\n","import React,{useState} from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Input = ({AddToList}) => {\r\n\r\n    const [text, setText] = useState ('');\r\n\r\n    const onInputChange = (e) => {\r\n    setText({text: e.target.value});\r\n}\r\n\r\nconst onInputClick = (e) => {\r\n      AddToList(curr=>[...curr,text])\r\n     setText({text: ''});\r\n     console.log(text);\r\n}\r\n\r\n    return (\r\n        <Container>\r\n            <br />\r\n            <label>Add TODO</label>\r\n            <input \r\n            id=\"search\"\r\n             type=\"text\" value={text.value} onChange={onInputChange}>\r\n            </input>\r\n            \r\n            <button onClick={onInputClick}>Add</button> \r\n        </Container>\r\n    )\r\n}\r\n\r\nconst Container = styled.div `\r\ndisplay:flex;\r\njustify-content:center;\r\nmargin-top:50px;\r\n\r\n`\r\nexport default Input\r\n","import React, { useState } from 'react'\nimport Header from './components/Header'\nimport List from './components/List'\nimport Input from './components/Input'\n\nconst App = () => {\n\n  const [TodoList, setTodoList] = useState([]);\n\n  return (\n    <div>\n      <Header />\n      <Input AddToList={setTodoList}/>\n      <List arr={TodoList}/>\n    </div>\n    \n  )\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}